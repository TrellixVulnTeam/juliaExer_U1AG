
# SymPy.jl を用いた単純な線形回帰

本記事では `SymPy.jl` の使い道として単回帰問題を解くことを考える．前半では問題設定と数学的な解法を与え，
後半では `SymPy.jl` を中心とした実装例を与える．



# 問題設定

説明変数と目的変数をペアとする二次元 $n$ 点集合 $\mathcal{D}=\{\,(x_i,y_i) \in \mathbb{R}^2 \mid i=1,\dots, n\,\}$ が与えられたとき，
この点集合を特徴付けるモデルを考えたい．モデルとして次の形をしている $f$ を考える．

$$
f = f(x) = f(x; a, b) := a x + b
$$

ここで $a$, $b$ は実数である．組 $w=(a,b)$ をここではパラメータと呼ぶことにする.
このモデルが点集合 $\mathcal{D}$ を特徴付けるというのは次の目的関数を最小とする
パラメータ $w=\hat{w}$ を与えることを指すことにする:

$$
E = E(w) = E(a, b) = \frac{1}{2}\sum_{i=1}^N \left(\hat{y}_i(a,b)-y\right)^2, \\
\hat{w} = \underset{w}{\operatorname{argmin}} E(w)
$$

ただし $\hat{y}_i := \hat{y}_i(a,b) = f(x_i;a,b) = ax_n + b$ である.
$\hat{y}_i$ は入力 $x_i$ に対するモデル $f$ の出力値である．
我々が欲しいパラメータ $\hat{w}=(\hat{a},\hat{b})$ は $E$ の極値問題を解くことで得られる．すなわち:

$$
\left.\frac{\partial E(a,b)}{\partial a}\right|_{(a,b)=(\hat{a},\hat{b})} =
\left.\frac{\partial E(a,b)}{\partial b}\right|_{(a,b)=(\hat{a},\hat{b})} = 0
$$

を満たす $w=\hat{w}=(\hat{a},\hat{b})$ を求めることになる.


## 単回帰問題を解く計算

上記の条件を満たす $w=\hat{w}=(\hat{a},\hat{b})$ を求めることにする.

$$
\begin{align*}
\frac{\partial E}{\partial a}
&= \sum_{i=1}^n x_n(ax_n+b-y_n) \\
&= a\sum_{i=1}^n x_n^2 + b\sum_{i=1}^n x_n - \sum_{i=1}^n x_ny_n. \\
\frac{\partial E}{\partial b}
&= \sum_{i=1}^n(ax_n+b-y_n) \\
&= a\sum_{i=1}^n x_n + Nb -\sum_{i=1}^n y_n.
\end{align*}
$$

これらの偏微分の値 $(a,b)=(\hat{a},\hat{b})$ が0になることを要請すると $a$, $b$ に関する連立方程式とみなすことで次のように書けることがわかる．

$$
\begin{align*}
\hat{a} &= \frac{\displaystyle n \sum_{i=1}^n x_n y_n - \left(\sum_{i=1}^n x_i \right)\left(\sum_{i=1}^n y_i\right)}
         {\displaystyle n \sum_{i=1}^n x_n^2 - \left(\sum_{i=1}^n x_n \right)^2}, \\
\hat{b} &=\frac{\displaystyle \left(\sum_{i=1}^n x_n^2\right)\left(\sum_{i=1}^n y_n\right) - \left(\sum_{n=1}^n x_n\right)\left(\sum_{i=1}^n x_n y_n\right)}
         {\displaystyle n \sum_{i=1}^n x_n^2 - \left(\sum_{i=1}^n x_n \right)^2}.
\end{align*}
$$

# SymPy.jl による計算

以下では上記で求めた単回帰問題の解を出力する実装を試みる．読者はすでにプログラミング言語 [Julia](https://julialang.org/) がインストールされており,
不自由なく Julia が起動できると仮定する．[SymPy.jl](https://github.com/JuliaPy/SymPy.jl) は [PyCall.jl](https://github.com/JuliaPy/PyCall.jl)
を経由することで [Python](https://www.python.org/) の [SymPy](https://www.sympy.org/en/index.html) を呼び出すインターフェースを提供する．

## インストール

Julia パッケージ `SymPy` インストールは次のようにすることができる．
 すでに Python 環境が整っており Python の `sympy` パッケージが導入されている場合は環境変数 `PYTHON` を普段用いている python コマンドの絶対パスを指定しておく.

```julia
using Pkg
ENV["PYTHON"] = Sys.which("python3")
Pkg.add("SymPy")
```

## SymPy.jl 入門

数式で用いられる記号がプログラム上でそのまま表現できるというのが最も素晴らしいことである．
現代のテクノロジーではそれはまだ遠いが近似解として Julia がある．下記の例は数学記号 $a$, $b$ を
Julia 上の変数 `a`, `b` に各々束縛した例である.

```julia; term=true
using SymPy
a, b = Sym("a b")
```

Python に馴染みのある読者であれば上記の Julia のコードは Python における下記のコードと同等のことであることがわかるであろう．

```python
import sympy
a, b=sympy.symbols("a b")
```

数学記号とプログラム上の変数名は一致させる必要はない．もし数学記号とプログラム上の変数名が同一として使いたい場合は次のようにして `@var` マクロを用いることができる

```julia; term=true
yy = Sym("y")
@vars x₁ x₂
expand((x₁ + x₂ + yy)^2)
```

Python に比べ Julia を使うメリットは変数名に `x₁` や `xᴺ` などのように数学ではよく使う添字を装飾した文字がプログラム上の変数として用いることができることである．
入力方法は `x\_1` を入力した際に Tab キーを入力することで変換することができる．

## 実装

下記のように説明変数, 目的変数をプログラム上で表現する系統的な方法を与える. `generate_symbol("x",n)`
すると用いると $x_i$ に対応するプログラム上の変数 `xᵢ` を Julia 上に導入できる．以下では Julia のプロンプト `julia>`は省略している．


```julia
tosub = Dict(
    '1' => '₁',
    '2' => '₂',
    '3' => '₃',
    '4' => '₄',
    '5' => '₅',
    '6' => '₆',
    '7' => '₇',
    '8' => '₈',
    '9' => '₉',
    '0' => '₀',
)

"""
Generate Sym object its names are
x₁,x₂,...
and return them as Sym[]
Example
julia> generate_symbol("x",3)
Sym[x₁, x₂, x₃]
"""
function generate_symbol(v::String, n::Int)
    data::Vector{Sym} = []
    for i = 1:n
        seqdigit = [tosub[c] for c in string(i)]
        v_s = "$v" * join(seqdigit)
        eval(Meta.parse("$(v_s)=Sym(\"$(v_s)\")"))
        push!(data, eval(Meta.parse("$(v_s)")))
    end
    return data
end
```

別実装として次の実装を紹介する．これは変数名の補完に用いる関数を呼び出して同様の処理を実現しようとしている．この実装では `tosub` として
定義した辞書オブジェクトを生成する必要がないことがメリットである．デメリットは `n` は9以下であることを要請することになる．原理がわかれば改良は容易だと思われるので一般化は読者の演習問題とする．

```julia
function _generate_symbol(v, n)
    data = Sym[]
    for i = 1:n
        target = "$(v)\\_$i"
        _sub = REPL.REPLCompletions.completions(target, length(target))[1][1]
        sub = REPL.REPLCompletions.completion_text(_sub)
        v_s = v * sub
        eval(Meta.parse("$(v_s)=Sym(\"$(v_s)\")"))
        push!(data, eval(Meta.parse("$(v_s)")))
    end
    return data
end
```

以下では `generate_symbol` を用いることにする．データ点の数は $n=5$ としておく. 

```julia
n = 5
a, b = @vars a b
xs = generate_symbol("x", n)
ys = generate_symbol("y", n)
```

モデルと目的関数は次のようにして記述できる. `@.` は各演算を dot syntax で修飾を自動で付与するマクロである．
詳細は [More Dots: Syntactic Loop Fusion in Julia](https://julialang.org/blog/2017/01/moredots) を参照すること.

```julia
f(x) = a * x + b
E = 1 / 2 * sum(@. (f(xs) - ys)^2);
```

さて, Julia 上で目的関数を最小にするパラメータを計算しよう．偏微分は `diff` 関数を用いる. `solve` 関数で方程式を解くことができる．

```julia
function solve_reg()
    ∂E∂a, ∂E∂b = diff(E, a), diff(E, b)
    solution = solve([∂E∂a, ∂E∂b], (a, b))
    return solution
end

sol=solve_reg()
â = sol[a]
b̂ = sol[b];
```

これで `â`,`b̂` が各々 $\hat{a}$, $\hat{b}$ に対応するものとして得られる．これと前半の手計算で求めた解と一致することを確認しよう.
手計算に対応する Julia 実装は次の通りである．

```julia
function theoretical()
    denom = n * sum(xs .^ 2) - sum(xs)^2
    a_num = n * sum(xs .* ys) - sum(xs) * sum(ys)
    â = a_num / denom
    b_num = sum(xs .^ 2) * sum(ys) - sum(xs) * sum(xs .* ys)
    b̂ = b_num / denom
    return Dict(a => â, b => b̂)
end

sol2 = theoretical()
err_a = sol[a] - sol2[a] |> simplify
err_b = sol[b] - sol2[b] |> simplify
@assert err_a == 0
@assert err_b == 0
```

`@assert` マクロで二通りの方法がデータに関する式として恒等的に一致していることが確認できる．`simplify` で簡略しないと式をまとめてくれないことに注意する．

# Appendix

これまでの議論をまとめた実装を記述する. 線形方程式を解くための `linsolve` 関数を用いる方法も付録として加えたが SymPy.jl では不具合があるようである．

```julia
using PyCall
using SymPy
using REPL

tosub = Dict(
    '1' => '₁',
    '2' => '₂',
    '3' => '₃',
    '4' => '₄',
    '5' => '₅',
    '6' => '₆',
    '7' => '₇',
    '8' => '₈',
    '9' => '₉',
    '0' => '₀',
)

"""
Generate Sym object its names are
x₁,x₂,...
and return them as Sym[]
Example
julia> generate_symbol("x",3)
Sym[x₁, x₂, x₃]
"""
function generate_symbol(v::String, n::Int)
    data::Vector{Sym} = []
    for i = 1:n
        seqdigit = [tosub[c] for c in string(i)]
        v_s = "$v" * join(seqdigit)
        eval(Meta.parse("$(v_s)=Sym(\"$(v_s)\")"))
        push!(data, eval(Meta.parse("$(v_s)")))
    end
    return data
end

"""
This func cant use n more than 9
"""
function _generate_symbol(v, n)
    data = Sym[]
    for i = 1:n
        target = "$(v)\\_$i"
        _sub = REPL.REPLCompletions.completions(target, length(target))[1][1]
        sub = REPL.REPLCompletions.completion_text(_sub)
        v_s = v * sub
        eval(Meta.parse("$(v_s)=Sym(\"$(v_s)\")"))
        push!(data, eval(Meta.parse("$(v_s)")))
    end
    return data
end

n = 5
xs = generate_symbol("x", n)
ys = generate_symbol("y", n)

# Uncomment if you can switch randomized numerical data
#xs, ys=rand(n), rand(n)
#


@vars a b

f(x) = a * x + b
E = 1 / 2 * sum(@. (f(xs) - ys)^2)

function bruteforce()
    ∂E∂a, ∂E∂b = diff(E, a), diff(E, b)
    solution = solve([∂E∂a, ∂E∂b], (a, b))
    solution
end

function theoretical()
    denom = n * sum(xs .^ 2) - sum(xs)^2
    a_num = n * sum(xs .* ys) - sum(xs) * sum(ys)
    â = a_num / denom
    b_num = sum(xs .^ 2) * sum(ys) - sum(xs) * sum(xs .* ys)
    b̂ = b_num / denom
    return Dict(a => â, b => b̂)
end

function uselinsolve1()
    ∂E∂a, ∂E∂b = diff(E, a), diff(E, b)
    solution = linsolve((∂E∂a, ∂E∂b), (a, b))
    return solution
end

function uselinsolve2()
    A = [
        diff(E, a, 2) diff(diff(E, a), b)
        diff(diff(E, b), a) diff(E, b, 2)
    ] .|> simplify
    v = -[diff(E, a)(a => 0, b => 0), diff(E, b)(a => 0, b => 0)]
    solution = linsolve((A, v), a, b)
    return solution
end

py"""
def decompose(r):
    return [[eq for eq in eqs] for eqs in r.args]
"""

r0 = theoretical()
r1 = bruteforce()
r2 = py"decompose"(uselinsolve1())
r3 = py"decompose"(uselinsolve2())


@assert  r0[a] - r1[a] |> simplify == 0
@assert  r0[a] - r2[1] |> simplify == 0
@assert  r0[a] - r3[1] |> simplify == 0

@assert  r0[b] - r1[b] |> simplify == 0
@assert  r0[b] - r2[2] |> simplify == 0
@assert  r0[b] - r3[2] |> simplify == 0
```
